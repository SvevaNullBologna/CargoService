/* Generated by AN DISI Unibo */ 
package it.unibo.devicescontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Devicescontroller ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name turning on...")
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingCommand", cond=doswitch() )
				}	 
				state("waitingCommand") { //this:State
					action { //it:State
						CommUtils.outgreen("$name waiting command...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="devicesOn",cond=whenDispatch("devicesStart"))
					transition(edgeName="t05",targetState="devicesOff",cond=whenDispatch("devicesStop"))
					transition(edgeName="t06",targetState="anomaly",cond=whenEvent("anomalyDetected"))
				}	 
				state("devicesOn") { //this:State
					action { //it:State
						
									Runtime.getRuntime().exec("python ledCheck.py")
						delay(1000) 
						CommUtils.outgreen("sonardevice and led ready...")
						emit("devicescontrollerReady", "devicescontrollerReady(T)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingCommand", cond=doswitch() )
				}	 
				state("devicesOff") { //this:State
					action { //it:State
						
									Runtime.getRuntime().exec("python ledCheck.py")
						CommUtils.outgreen("sonardevice and led off...")
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingCommand", cond=doswitch() )
				}	 
				state("anomaly") { //this:State
					action { //it:State
						CommUtils.outblack("$name turning on led for anomaly...")
						
									Runtime.getRuntime().exec("python ledOn.py")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t17",targetState="anomalyFix",cond=whenEvent("anomalyFixed"))
				}	 
				state("anomalyFix") { //this:State
					action { //it:State
						CommUtils.outblack("$name turning off led because the anomaly is fixed...")
						
									Runtime.getRuntime().exec("python ledOff.py")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingCommand", cond=doswitch() )
				}	 
			}
		}
} 
