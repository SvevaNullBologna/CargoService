System webguimodel

Dispatch update : update(HoldJsonString)
Request sendrequest : sendrequest(PID)
Reply sendrequestAnswer : sendrequestAnswer(Answ) for sendrequest

Context ctx_webguimodel ip [host="localhost" port=8005]
Context ctx_cargoservice ip [host="127.0.0.1" port=8000]

ExternalQActor hold context ctx_cargoservice
ExternalQActor companyrequestreceiver context ctx_cargoservice

QActor loadrequestsendpage context ctx_webguimodel{
 	State s0 initial {
 		println("$name STARTS") color yellow
 		delay 5000
	}Goto waitinginput
	
	State waitinginput{
		println("$name waiting input") color yellow
		delay 6000		
	}Goto sendrequest
	
  	State sendrequest{//simulating request
  		[# val Rnds = (0..100).random() #]
  		println("$name sending request") color yellow
  		request companyrequestreceiver -m sendrequest : sendrequest($Rnds)
  		delay 6000
  	}
  	Transition t0
  	whenReply sendrequestAnswer -> printAnswer
  	
  	State printAnswer{
  		onMsg(sendrequestAnswer : sendrequestAnswer(Answ)){
  			[#
  				val AnswerToRequest = payloadArg(0) color yellow
  			#]
  			println($AnswerToRequest) color yellow
  		}
  	}Goto waitinginput
  	
  	
  	
}


QActor holdshowpage context ctx_cargoservice{//simuliamo la pagina hold
	[#
		var CurrentState = "hold"
		
		fun update(json: String){
			CurrentState = json
		}
	#]
	State s0 initial{
		println("$name STARTS") color blue
 		delay 5000
	}Goto waitingUpdate
	
	State waitingUpdate{
		println("$name waiting update") color blue
		observeResource hold msgid update 
	}Transition t0
	whenMsg update -> handleHoldState 
	
	State handleHoldState{
		println("$name received update")
		
		onMsg(update : update(HoldJsonString)){
			[#
				val received = payloadArg(0)
				update(received)
			#]
			println("$name updated hold") color blue
			
		}
	}Goto waitingUpdate
	
}