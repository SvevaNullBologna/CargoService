/* Generated by AN DISI Unibo */ 
package it.unibo.loadrequestsendpage

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import org.json.simple.JSONArray

class Loadrequestsendpage ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
		   		var CurrentShownMessage = "waiting for request"
		   		fun updateMessage(message: String){
		       		CurrentShownMessage = message
		   		}
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name STARTS")
						observeResource("127.0.0.1","8000","ctx_cargoservice","hold","update")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outyellow("$CurrentShownMessage")
						delay(6000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="sendRequest",cond=whenDispatch("hitsend"))
				}	 
				state("sendRequest") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("hitsend(PID)"), Term.createTerm("hitsend(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val PID = payloadArg(0)  
								request("sendrequest", "sendrequest($PID)" ,"companyrequestreceiver" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="printMessage",cond=whenReply("sendrequestAnswer"))
				}	 
				state("printMessage") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sendrequestAnswer(Answ)"), Term.createTerm("sendrequestAnswer(Answ)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Answer = payloadArg(0)  
								CommUtils.outyellow("$Answer")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitSystemFinish", cond=doswitch() )
				}	 
				state("waitSystemFinish") { //this:State
					action { //it:State
						CommUtils.outyellow("$name waiting for the system to end the task")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="updateMessage",cond=whenDispatch("update"))
				}	 
				state("updateMessage") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("update(HoldJsonString)"), Term.createTerm("update(HoldJsonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								  				val msg = payloadArg(0) 
								  				updateMessage(msg)
								CommUtils.outyellow("$msg")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
} 
