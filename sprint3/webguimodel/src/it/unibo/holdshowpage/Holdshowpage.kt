/* Generated by AN DISI Unibo */ 
package it.unibo.holdshowpage

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import org.json.simple.JSONArray

class Holdshowpage ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var CurrentState = "hold"
				
				fun update(json: String){
					CurrentState = json
				}
				
				fun fetchUI(json: String): String {
		    		val parser = JSONParser()
		    		val result = mutableMapOf<String, Any>()
		
		    		try {
		        		val obj = parser.parse(json) as JSONObject
		
		        		// shipLoad
		        		if (obj.containsKey("shipLoad")) {
		            		result["shipLoad"] = (obj["shipLoad"] as Long).toInt()
		        		}
		
		        		// slots
		        		if (obj.containsKey("slots")) {
		            		val slotsArray = obj["slots"] as JSONArray
		            		val slots = mutableListOf<String>()
		            		for (i in 0 until slotsArray.size) {
		                		slots.add(slotsArray[i]?.toString() ?: "libero")
		            		}
		            		result["slots"] = slots
		        		}
		
		        		// result
		        		if (obj.containsKey("result")) {
		            		result["result"] = obj["result"].toString()
		        		}
		
		    		} catch (e: Exception) {
		        		println("Errore in fetchUI: ${e.message}")
		        		result["error"] = e.message ?: "Errore sconosciuto"
		    		}
		
		    		// ritorna una stringa con il formato che vuoi (JSON)
		    		return JSONObject(result).toJSONString()
				}
		    
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						observeResource("127.0.0.1","8000","ctx_cargoservice","hold","update")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingUpdate", cond=doswitch() )
				}	 
				state("waitingUpdate") { //this:State
					action { //it:State
						CommUtils.outblue("$name waiting update")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleHoldState",cond=whenEvent("filteredupdate"))
				}	 
				state("handleHoldState") { //this:State
					action { //it:State
						CommUtils.outblack("$name received update")
						if( checkMsgContent( Term.createTerm("update(HoldJsonString)"), Term.createTerm("update(HoldJsonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val received = payloadArg(0)
												val holdstate = fetchUI(received)
												update(holdstate)
								CommUtils.outblue("$name updated hold")
								CommUtils.outblack("$holdstate")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingUpdate", cond=doswitch() )
				}	 
			}
		}
} 
