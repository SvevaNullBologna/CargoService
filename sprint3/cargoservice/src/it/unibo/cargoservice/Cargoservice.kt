/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*
import main.java.domain.Product

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var Cur_Slot_ID = -1
				var Cur_PID = -1
				var Cur_Weight = -1
				var Cur_Direction = "down"
				
				
				var Cur_SlotX = -1
				var Cur_SlotY = -1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("cargoservice STARTS")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitrequest", cond=doswitch() )
				}	 
				state("waitrequest") { //this:State
					action { //it:State
						CommUtils.outmagenta("WAITING FOR LOAD REQUEST...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="getweight",cond=whenRequest("loadrequest"))
				}	 
				state("getweight") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Cur_PID = payloadArg(0).toInt()  
								CommUtils.outmagenta("received request with PID : $Cur_PID")
								CommUtils.outmagenta("sending request to productservice")
								request("getProduct", "product($Cur_PID)" ,"productservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitAnswer", cond=doswitch() )
				}	 
				state("waitAnswer") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name waiting answer from productservice")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="checkProdAnswer",cond=whenReply("getProductAnswer"))
				}	 
				state("checkProdAnswer") { //this:State
					action { //it:State
						CommUtils.outmagenta("received answer from productservice")
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("product(JSonString)"), Term.createTerm("product(JsonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val jsonStr = payloadArg(0)
												val p = Product(jsonStr)
												Cur_Weight = p.getWeight()
												Cur_PID = p.getProductId()
								CommUtils.outmagenta("$jsonStr")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="validateRequest", cond=doswitch() )
				}	 
				state("validateRequest") { //this:State
					action { //it:State
						CommUtils.outmagenta("checking if product fits")
						request("checkIfFits", "checkIfFits($Cur_PID,$Cur_Weight)" ,"hold" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t22",targetState="retrieveDataFromHold",cond=whenReply("accepted"))
					transition(edgeName="t23",targetState="managerefusal",cond=whenReply("refused"))
				}	 
				state("retrieveDataFromHold") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("accepted(JsonString)"), Term.createTerm("accepted(JsonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val jsonStr = payloadArg(0).toString()
								            	val jsonObj = org.json.JSONObject(jsonStr)
								            	
								            	Cur_PID = jsonObj.getInt("pid")
								            	Cur_Weight = jsonObj.getInt("weight")
								            	Cur_Slot_ID = jsonObj.getInt("id")
								            	Cur_SlotX = jsonObj.getInt("x")
								            	Cur_SlotY = jsonObj.getInt("y")
								            	Cur_Direction = jsonObj.getString("dir")
								CommUtils.outmagenta("Data retrieved from hold: PID=$Cur_PID, Weight=$Cur_Weight, Slot=$Cur_Slot_ID, X=$Cur_SlotX, Y=$Cur_SlotY, Dir=$Cur_Direction")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitForProduct", cond=doswitch() )
				}	 
				state("managerefusal") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("refused(Reason)"), Term.createTerm("refused(Reason)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Rst = "Request refused"
								CommUtils.outmagenta("refusing request")
								answer("loadrequest", "resultrequest", "resultrequest($Rst)"   )  
						}
						
										Cur_Slot_ID = -1
										Cur_PID = -1
										Cur_Weight = -1
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitrequest", cond=doswitch() )
				}	 
				state("waitForProduct") { //this:State
					action { //it:State
						CommUtils.outmagenta("REQUEST ACCEPTED. Waiting for product on IOPort...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t34",targetState="serveloadrequest",cond=whenEvent("productDetected"))
				}	 
				state("serveloadrequest") { //this:State
					action { //it:State
						CommUtils.outmagenta("Product detected. Moving robot...")
						CommUtils.outmagenta("Slot = $Cur_Slot_ID")
						forward("command", "command($Cur_SlotX,$Cur_SlotY,$Cur_Direction)" ,"cargorobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitendofrequest", cond=doswitch() )
				}	 
				state("waitendofrequest") { //this:State
					action { //it:State
						CommUtils.outmagenta("Waiting for robot to finish its task...")
						delay(300) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t45",targetState="lastoperations",cond=whenEvent("finishedtransport"))
				}	 
				state("lastoperations") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("finishedtransport(T)"), Term.createTerm("finishedtransport(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Msg = payloadArg(0).toString()
								if(  Msg=="failure"  
								 ){CommUtils.outmagenta("There was a fatal error with the load. Load request rejected")
								 val Rst = "\"Request failed because of fatal error\""  
								answer("loadrequest", "resultrequest", "resultrequest($Rst)"   )  
								}
								else
								 {CommUtils.outmagenta("end of robot's operations with success.")
								  val Rst = "\"Request accomplished with success\""   
								 answer("loadrequest", "resultrequest", "resultrequest($Rst)"   )  
								 }
								
												Cur_Slot_ID = -1
												Cur_PID = -1
												Cur_Weight = -1
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitrequest", cond=doswitch() )
				}	 
			}
		}
} 
