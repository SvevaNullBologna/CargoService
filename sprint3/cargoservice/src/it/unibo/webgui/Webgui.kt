/* Generated by AN DISI Unibo */ 
package it.unibo.webgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Webgui ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				fun sendUpdateToWebGui(jsonString: String) {
		    try {
		        val url = java.net.URL("http://localhost:8085/webgui/update")
		        with(url.openConnection() as java.net.HttpURLConnection) {
		            requestMethod = "POST"
		            setRequestProperty("Content-Type", "application/json; utf-8")
		            doOutput = true
		            outputStream.use { os ->
		                val input = jsonString.toByteArray(Charsets.UTF_8)
		                os.write(input, 0, input.size)
		            }
		            val responseCode = responseCode
		            println("Sent JSON to webgui, response code: $responseCode")
		        }
		    } catch (e: Exception) {
		        println("Error sending JSON to webgui: ${e.message}")
		    }
		}
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("---- $name starting ----")
						observeResource("localhost","8000","ctx_cargoservice","hold","update")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingUpdate", cond=doswitch() )
				}	 
				state("waitingUpdate") { //this:State
					action { //it:State
						CommUtils.outcyan("---- $name waiting for update ----")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t027",targetState="updatingWebGui",cond=whenDispatch("update"))
				}	 
				state("updatingWebGui") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("update(HoldJsonString)"), Term.createTerm("update(HoldJsonString)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val HoldJsonString = payloadArg(0).toString()  
								CommUtils.outcyan("$name received update for webgui")
									
												sendUpdateToWebGui(HoldJsonString)
								CommUtils.outcyan("$name has sent an update to webgui")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingUpdate", cond=doswitch() )
				}	 
			}
		}
} 
