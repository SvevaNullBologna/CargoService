/* Generated by AN DISI Unibo */ 
package it.unibo.companyrequestreceiver

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Companyrequestreceiver ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var systemIsOccupied = false
				val Errormsg = "\"the system is occupied with another request\""
				val Msg = "\"the system is taking care of your request\""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outblue("$name waiting to receive a request")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t028",targetState="handleRequest",cond=whenRequest("sendrequest"))
					transition(edgeName="t029",targetState="handleResult",cond=whenReply("resultrequest"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("sendrequest(PID)"), Term.createTerm("sendrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								  				val PID = payloadArg(0) 
								if(  systemIsOccupied  
								 ){answer("sendrequest", "sendrequestAnswer", "sendrequestAnswer($Errormsg)"   )  
								}
								else
								 { systemIsOccupied = true  
								 answer("sendrequest", "sendrequestAnswer", "sendrequestAnswerToRequest($Msg)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("handleResult") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("resultrequest(Rst)"), Term.createTerm("resultrequest(Rst)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								  				val Result = payloadArg(0)
								  				systemIsOccupied = false
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
} 
