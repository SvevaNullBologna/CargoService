/* Generated by AN DISI Unibo */ 
package it.unibo.hold

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.HoldData
import main.java.Slot

class Hold ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				lateinit var hold : HoldData 
				var AvailableSlot: Slot? = null
				var ProductWeight = -1
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name starting")
						delay(1000) 
						
									hold = HoldData()
									val HoldJsonString = hold.holdToJson()  
						updateResourceRep(HoldJsonString 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_request", cond=doswitch() )
				}	 
				state("waiting_request") { //this:State
					action { //it:State
						CommUtils.outyellow("$name waiting request...")
						CommUtils.outyellow("$name sending update to webgui...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t025",targetState="checkRequest",cond=whenRequest("checkIfFits"))
					transition(edgeName="t026",targetState="registerDelivery",cond=whenEvent("deliveredToSlot"))
				}	 
				state("checkRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("checkIfFits(PID,Weight)"), Term.createTerm("checkIfFits(PID,Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val ProductPID = payloadArg(0).toInt();
												ProductWeight = payloadArg(1).toInt();
												AvailableSlot = hold.getAvailableSlot();
								if(  hold.canLoad( AvailableSlot!!.getId(), ProductWeight)  
								 ){ val ResultOfRequest = hold.checkResultToJson(AvailableSlot!!, ProductPID, ProductWeight)  
								answer("checkIfFits", "accepted", "accepted($ResultOfRequest)"   )  
								}
								else
								 { val Reason = "product does not fit in the hold" 
								 answer("checkIfFits", "refused", "refused($Reason)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_request", cond=doswitch() )
				}	 
				state("registerDelivery") { //this:State
					action { //it:State
						
									hold.registerProductInSlot(AvailableSlot!!, ProductWeight)
						CommUtils.outyellow("product delivered successfully...")
						
									AvailableSlot = null
									ProductWeight = -1
						 val HoldJsonString = hold.holdToJson()  
						updateResourceRep(HoldJsonString 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting_request", cond=doswitch() )
				}	 
			}
		}
} 
