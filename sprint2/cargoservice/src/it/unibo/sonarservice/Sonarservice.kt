/* Generated by AN DISI Unibo */ 
package it.unibo.sonarservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Sonarservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
				val DFREE = 30
				var counter = 0  
				
				var anomaly = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outgreen("sonarservice ready")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="turningSonarOn", cond=doswitch() )
				}	 
				state("turningSonarOn") { //this:State
					action { //it:State
						CommUtils.outgreen("sonarservice active: activating devices...")
						forward("devicesStart", "devicesStart(T)" ,"reactor" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t10",targetState="detecting",cond=whenEvent("reactorReady"))
				}	 
				state("detecting") { //this:State
					action { //it:State
						CommUtils.outgreen("$name waiting for distance detection...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t21",targetState="filterdistance",cond=whenDispatch("distance"))
				}	 
				state("filterdistance") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("distance(Dist)"), Term.createTerm("distance(Dist)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val d = payloadArg(0).toInt()  
								if(  d > DFREE || d < 0  
								 ){ anomaly = true  
								emit("anomalyDetected", "anomalyDetected(T)" ) 
								}
								else
								 {if(  anomaly  
								  ){ anomaly = false  
								 emit("anomalyFixed", "anomalyFixed(T)" ) 
								 }
								 if(  d < DFREE/2  
								  ){ counter++  
								 if(  counter >= 3  
								  ){ counter = 0  
								 emit("productDetected", "productDetected(T)" ) 
								 }
								 }
								 }
						}
						delay(3000) 
						forward("keepDetecting", "keepDetecting(T)" ,name ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t32",targetState="detecting",cond=whenDispatch("keepDetecting"))
					transition(edgeName="t33",targetState="turningoff",cond=whenDispatch("devicesStop"))
				}	 
				state("turningoff") { //this:State
					action { //it:State
						CommUtils.outgreen("sonarservice turning off: deactivating sonar...")
						forward("devicesStop", "devicesStop(T)" ,"reactor" ) 
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
