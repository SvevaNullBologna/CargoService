/* Generated by AN DISI Unibo */ 
package it.unibo.sonarservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Sonarservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 
				val DFREE = 30
				var counter = 0  
				var reactorReady = false
				var detectorReady = false 
				var anomaly = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outgreen("sonarservice ready")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="turningSonarOn", cond=doswitch() )
				}	 
				state("turningSonarOn") { //this:State
					action { //it:State
						CommUtils.outgreen("sonarservice active: activating devices...")
						forward("devicesStart", "devicesStart(T)" ,"reactor" ) 
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t10",targetState="handleReactorReady",cond=whenEvent("reactorReady"))
					transition(edgeName="t11",targetState="handleDetectorReady",cond=whenEvent("detectorReady"))
				}	 
				state("handleReactorReady") { //this:State
					action { //it:State
						 reactorReady = true  
						if(  reactorReady && detectorReady  
						 ){forward("ready", "ready(T)" ,"sonarservice" ) 
						}
						else
						 {forward("notReadyYet", "notReadyYet(T)" ,name ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t22",targetState="detecting",cond=whenDispatch("ready"))
					transition(edgeName="t23",targetState="handleDetectorReady",cond=whenEvent("detectorReady"))
					transition(edgeName="t24",targetState="turningSonarOn",cond=whenDispatch("notReadyYet"))
				}	 
				state("handleDetectorReady") { //this:State
					action { //it:State
						 detectorReady = true  
						if(  reactorReady && detectorReady  
						 ){forward("ready", "ready(T)" ,name ) 
						}
						else
						 {forward("notReadyYet", "notReadyYet(T)" ,name ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t25",targetState="detecting",cond=whenDispatch("ready"))
					transition(edgeName="t26",targetState="handleReactorReady",cond=whenEvent("reactorReady"))
					transition(edgeName="t27",targetState="turningSonarOn",cond=whenDispatch("notReadyYet"))
				}	 
				state("detecting") { //this:State
					action { //it:State
						CommUtils.outgreen("sonarservice working ")
						if(  distance > DFREE || distance < 0  
						 ){ anomaly = true  
						emit("anomalyDetected", "anomalyDetected(T)" ) 
						}
						else
						 {if(  distance < DFREE/2  
						  ){if(  anomaly  
						  ){ anomaly = false  
						 emit("anomalyFixed", "anomalyFixed(T)" ) 
						 }
						 forward("correctDistanceDetected", "correctDistanceDetected(T)" ,name ) 
						 }
						 else
						  {forward("keepDetecting", "keepDetecting(T)" ,name ) 
						  }
						 }
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t38",targetState="count",cond=whenDispatch("correctDistanceDetected"))
					transition(edgeName="t39",targetState="detecting",cond=whenDispatch("keepDetecting"))
					transition(edgeName="t310",targetState="detecting",cond=whenEvent("anomalyDetected"))
				}	 
				state("count") { //this:State
					action { //it:State
						 anomaly = false  
						 counter++  
						if(  counter >= 3  
						 ){ counter = 0  
						emit("productDetected", "productDetected(T)" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="detecting", cond=doswitch() )
				}	 
				state("turningoff") { //this:State
					action { //it:State
						CommUtils.outgreen("sonarservice turning off: deactivating sonar...")
						
									reactorReady = false
									detectorReady = false
						forward("devicesStop", "devicesStop(T)" ,"reactor" ) 
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
