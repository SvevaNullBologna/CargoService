System cargoservice

mqttBroker "192.168.137.1" : 1883 eventTopic "sonar/events" 

//SonarService -> Whoever is listening
Event productDetected : productDetected(T)
Event anomalyDetected : anomalyDetected(T)
Event anomalyFixed : anomalyFixed(T)
//Sonarservice -> reactor
Dispatch devicesStart : devicesStart(T)
Dispatch devicesStop : devicesStop(T)
//reactor -> sonarservice
Event reactorReady : reactorReady(T)
Dispatch distance : distance(Dist)
//sonarservice -> sonarservice
Dispatch keepDetecting : keepDetecting(T)

Context ctx_sonarservice			ip [host="localhost" port=8004] 



QActor sonarservice context ctx_sonarservice{
	[# 
		val DFREE = 30
		var counter = 0  
		
		var anomaly = false
	#]
	State s0 initial{
		delay 2000
		println("sonarservice ready") color green
	}Goto turningSonarOn
	
	State turningSonarOn {
		println("sonarservice active: activating devices...") color green
		forward reactor -m devicesStart : devicesStart(T)
	}
	Transition t1 
	whenEvent reactorReady -> detecting
	 
	State detecting{
		println("$name waiting for distance detection...") color green
	}
	Transition t2
	whenMsg distance -> filterdistance
	
	State filterdistance{
		printCurrentMessage
		onMsg(distance : distance(Dist)){
			[# val d = payloadArg(0).toInt() #]
			if[# d > DFREE || d < 0 #]{
			[# anomaly = true #]
			emit anomalyDetected : anomalyDetected(T)
			} 
			else{ // 0 < distance < DFREE  
				if[# anomaly #]{
					[# anomaly = false #]
					emit anomalyFixed : anomalyFixed(T)
				}
				if[# d < DFREE/2 #]{ // 0 < distance < DFREE/2
					[# counter++ #]
					if[# counter >= 3 #]{
						[# counter = 0 #]
						emit productDetected : productDetected(T)
					}	
				}
			}
		}
		delay 3000	
		autodispatch keepDetecting : keepDetecting(T)
	}
	Transition t3
	whenMsg keepDetecting -> detecting
	whenMsg devicesStop -> turningoff
	
	
	State turningoff{
		println("sonarservice turning off: deactivating sonar...") color green
		forward reactor -m devicesStop : devicesStop(T)
		delay 5000
	}
}


QActor reactor context ctx_sonarservice{
	State s0 initial{
		println("$name turning on...") color green
		delay 2000
	}Goto waitingCommand
		
	State waitingCommand{
		println("$name waiting command...") color green
	}Transition t0
	whenMsg devicesStart -> devicesOn
	whenMsg devicesStop -> devicesOff
	whenEvent anomalyDetected -> anomaly
	
	State devicesOn{
		[#
			Runtime.getRuntime().exec("python sonarStart.py")
			Runtime.getRuntime().exec("python ledCheck.py")
		#]
		delay 1000
		println("sonardevice and led ready...") color green
		emit reactorReady : reactorReady(T) 
	}Goto waitingCommand
	
	State readDistance{
		println("reading distance ...") color green
		[#
			val p = Runtime.getRuntime().exec("python getSonarDistance.py")
			val reader = java.io.BufferedReader(java.io.InputStreamReader(p.getInputStream()))
			val Dist = Integer.parseInt(reader.readLine())
		#]
		forward sonarservice -m distance : distance($Dist)
	}Goto readDistance
	
	State devicesOff {
		[#
			Runtime.getRuntime().exec("python sonarStop.py")
			Runtime.getRuntime().exec("python ledCheck.py")
		#]
		println("sonardevice and led off...") color green
		delay 2000
	}Goto waitingCommand
	
	State anomaly{
		println("$name turning on led for anomaly...")
		[#
			Runtime.getRuntime().exec("python ledOn.py")
		#]
	}
	Transition t1
	whenEvent anomalyFixed -> anomalyFix
	
	State anomalyFix{
		println("$name turning off led because the anomaly is fixed...")
		[#
			Runtime.getRuntime().exec("python ledOff.py")
		#]	
	}Goto waitingCommand
	
}

