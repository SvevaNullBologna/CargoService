System cargoservice
 
mqttBroker "mosquittoalone" : 1883 eventTopic "unibo/qak/events" 
//MESSAGES AND EVENTS 
//Companysimulator -> CargoService
Request loadrequest : loadrequest(PID)
//CargoService -> ProductService 
Request getProduct : product( ID )    
Reply   getProductAnswer: product( JSonString ) for getProduct 
//CargoService -> CargoService
Dispatch accepted : accepted(PID, Weight, Slot)
Dispatch refused : refused(PID, Weight)
//SonarService -> Whoever is listening
Event productDetected : productDetected(T)
Event anomalyDetected : anomalyDetected(T)
Event anomalyFixed : anomalyFixed(T)
//CargoService -> cargorobot
Dispatch command : command(X,Y,DIR)
//Cargorobot -> Whoever is listening 
Event deliveredToSlot : deliveredToSlot(T)
//CargoRobot -> BasicRobot 
Request engage : engage(device, length)
Request moverobot : moverobot(x, y)
Dispatch setdirection : dir( D )  //up|down|left|right
Event alarm : alarm(reason) //to stop robot completely
Event info : info(x)
//basicRobot -> CargoRobot
Reply engagedone : engagedone(E)
Reply engagerefused : engagerefused(E) 
Reply moverobotdone : moverobotdone(T)
Reply moverobotfailed : moverobotfailed(T)


//CargoRobot -> webgui
Dispatch update : update(U)

//CargoRobot -> Whoever is listening
Event finishedtransport : finishedtransport(T)

Context ctx_cargoservice 			ip [host="localhost" port=8000]
Context ctx_productservice 			ip [host="127.0.0.1" port=8111]
Context ctx_basicrobot 				ip [host= "127.0.0.1" port=8020]
//Context ctx_companysim 				ip [host="localhost" port=8003]
Context ctx_sonarservice			ip [host="127.0.0.1" port=8004] //per quando facciamo partire il sonar sulla stessa macchina
//Context ctx_sonarservice 			ip [host="" port=8004] //per quando deve cercare il raspberry


ExternalQActor basicrobot context ctx_basicrobot
ExternalQActor productservice context ctx_productservice 


QActor companysimulator context ctx_cargoservice{
 	State s0 initial {
 		println("$name STARTS") color cyan
 		delay 5000
  	}Goto sendRequest
  	
  	State sendRequest{
  		println("$name sending request ") color cyan
  		request cargoservice -m loadrequest : loadrequest(10)
  	}
}

QActor cargoservice context ctx_cargoservice{
	import "main.java.Slots"
	import "main.java.Slot"
	import "main.java.domain.Product"
	
	[#
		val MaxLoad = 1000
		lateinit var S: Slots
		var Cur_HoldWeight = 0

		var Cur_Slot_ID = -1
		var Cur_PID = -1
		var Cur_Weight = -1
		var Cur_Direction = "down"
		
	#]
	State s0 initial{
		println("cargoservice STARTS") color magenta
		[#
			S = Slots()
		#]
		delay 5000
	}
	Goto waitrequest
	
	State waitrequest{
		println("WAITING FOR LOAD REQUEST...") color magenta
	} 
	Transition t0 whenRequest loadrequest -> getweight
	
	State getweight{
		printCurrentMessage
		onMsg(loadrequest: loadrequest(PID)){
			[# Cur_PID = payloadArg(0).toInt() #]
			println("received request with PID : $Cur_PID") color magenta
			println("sending request to productservice") color magenta
			request productservice -m getProduct : product($Cur_PID)
		}
	}
	Goto waitAnswer

	State waitAnswer{
		println("$name waiting answer from productservice") color magenta
	}
	Transition t1 
	whenReply getProductAnswer -> checkProdAnswer
	
	State checkProdAnswer{
		println("received answer from productservice") color magenta
		printCurrentMessage
		onMsg(getProductAnswer: product( JSonString )){
			[#
				val jsonStr = payloadArg(0)
				val p = Product(jsonStr)
				Cur_Weight = p.getWeight()
				Cur_PID = p.getProductId()
			#]
			println("$jsonStr") color magenta
		}
	}
	Goto validateRequest if [# Cur_Weight > 0 #] else managerefusal
	
	State managerefusal{
		println("Request refused. Back to wait.") color magenta
	}Goto waitrequest
	
	State validateRequest{
		[# 
			Cur_Slot_ID = S.getAvaiableSlotID()
			val canLoad = Cur_Weight > 0 && (Cur_HoldWeight + Cur_Weight) <= MaxLoad && Cur_Slot_ID != -1 
		#]
			if[#canLoad#]{
				autodispatch accepted : accepted($Cur_PID, $Cur_Weight, $Cur_Slot_ID)
			}
			else{
				autodispatch refused : refused($Cur_PID, $Cur_Weight)
			}	 
	}
	Transition t2 
	whenMsg accepted -> waitForProduct
	whenMsg refused -> managerefusal
	
State waitForProduct{
		println("REQUEST ACCEPTED. Waiting for product on IOPort...") color magenta
	}
	Transition t3
	whenEvent productDetected -> serveloadrequest
	
	State serveloadrequest{
		println("Product detected. Moving robot...") color magenta
		println("Slot = $Cur_Slot_ID") color magenta
		[#
			val DestinationX = S.getDepositPositionXById(Cur_Slot_ID)
			val DestinationY = S.getDepositPositionYById(Cur_Slot_ID)
			val Direction = S.getSlotDepositDirectionById(Cur_Slot_ID)
		#]
		forward cargorobot -m command : command($DestinationX, $DestinationY, $Direction)
	}Goto waitendofrequest
	
	
State delivered{
	
}
	State waitendofrequest{
		println("Waiting for robot to finish its task...") color magenta
		delay 300 	
	}
	Transition t4 
	whenEvent deliveredToSlot -> registerDelivery
	whenEvent finishedtransport -> lastoperations 
	
	State registerDelivery{
		[#
					S.registerProductInSlot(Cur_Slot_ID)
				  	Cur_HoldWeight = Cur_HoldWeight + Cur_Weight 
				  	val T = "loaded to $Cur_Slot_ID"
				#]
				println("product delivered successfully...") color magenta
	}
	
	State lastoperations{
		printCurrentMessage
		onMsg(finishedtransport : finishedtransport(T)){
			[# val msg = payloadArg(0).toString()#]
			if[# msg=="failure" #]{
				println("There was a fatal error with the load. Load request rejected") color magenta
				
			}
			else{
				println("end of robot's operations with success.") color magenta
			}
			[#
				Cur_Slot_ID = -1
				Cur_PID = -1
				Cur_Weight = -1
			#]
		}
		
	}Goto waitrequest
	
	
}

QActor cargorobot context ctx_cargoservice {
	[#
		val StepTime = 350
		val HomeX = 0
		val HomeY = 0 
		val IoX = 0
		val IoY = 4

		var DestSlotX = 0
		var DestSlotY = 0
		var CurrentDestX = 0
		var CurrentDestY = 0
		
		var Direction = "down"
		
		var endWithFailure = false
	#]

	State s0 initial {
		println("$name RUNNING") color yellow
		delay 500
	}Goto engageRobot

	State engageRobot {
		println("Engaging basic-robot...") color yellow
		request basicrobot -m engage : engage(cargorobot, $StepTime)
	}
	Transition t0
	whenReply engagedone -> waitForCommand
	whenReply engagerefused -> retryEngage

	State retryEngage {
		println("Engage refused, retrying...") color yellow
		delay 500
	}Goto engageRobot

	State waitForCommand {
		println("Waiting for command") color yellow
	}
	Transition t1 whenMsg command -> prepareDelivery

	State prepareDelivery {
		printCurrentMessage
		onMsg(command : command(X,Y,DIR)) {
			[# 
				DestSlotX = payloadArg(0).toInt()
				DestSlotY = payloadArg(1).toInt()
				Direction = payloadArg(2).toString()
				
			#]
			
		}
	}Goto pickup
	
	State pickup{
		println("Going to IOPort to pick up product...") color yellow
		[#
        	CurrentDestX = IoX
        	CurrentDestY = IoY
      	#]
      	println("CurrentDestX = $CurrentDestX; CurrentDestY = $CurrentDestY") color yellow
      	request basicrobot -m moverobot : moverobot($CurrentDestX, $CurrentDestY)
	}
	Transition t2
	whenReply moverobotdone -> delivery
	whenReply moverobotfailed -> handleFailure
	whenInterruptEvent alarm -> handleAnomaly
	whenInterruptEvent anomalyDetected -> handleAnomaly
	
	State delivery{
		delay 3000
		println("Delivering product to slot...") color yellow
      		[#
        		CurrentDestX = DestSlotX
        		CurrentDestY = DestSlotY
      		#]
      		println("CurrentDestX = $CurrentDestX; CurrentDestY = $CurrentDestY") color yellow
      		request basicrobot -m moverobot : moverobot($CurrentDestX, $CurrentDestY)
	}
	Transition t3 
	whenReply moverobotdone -> deposit
	whenReply moverobotfailed -> handleFailure
	whenInterruptEvent alarm -> handleAnomaly
	whenInterruptEvent anomalyDetected -> handleAnomaly
	
	State deposit{
		forward basicrobot -m setdirection : dir($Direction)
		println("depositing product on slot...") color yellow
		delay 3000
		emit  deliveredToSlot : deliveredToSlot(ok)
	}
	Goto return 
	
	State return{
		println("Returning to home position...") color yellow
      		[#
        		CurrentDestX = HomeX
        		CurrentDestY = HomeY
      		#]
      		println("CurrentDestX = $CurrentDestX; CurrentDestY = $CurrentDestY")
      		request basicrobot -m moverobot : moverobot($CurrentDestX, $CurrentDestY)
	}
	Transition t4
	whenReply moverobotdone -> endOfTask 
	whenReply moverobotfailed -> handleFailure
	whenInterruptEvent alarm -> handleAnomaly
	whenInterruptEvent anomalyDetected -> handleAnomaly
	
	State endOfTask{
		if[# endWithFailure #]{
			println("Robot move failed. Check system status.") color red
			emit finishedtransport : finishedtransport(failure)
		}
		else{
			println("Transport complete. Emitting finishedtransport.") color yellow
      		emit finishedtransport : finishedtransport(ok)
		}
		[# val Dir = "down"#]
		forward basicrobot -m setdirection : dir($Dir)
	}
	Transition t5
	whenReply moverobotdone -> waitForCommand
	whenReply moverobotfailed -> handleFailure
	whenInterruptEvent alarm -> handleAnomaly
	whenInterruptEvent anomalyDetected -> handleAnomaly


	State handleFailure {
		[# endWithFailure = true #]		
	}Goto return 
	
	
	State handleAnomaly {
		println("Anomaly detected. Stopping robot...") color yellow
		emit alarm : alarm(blocca)
	}Goto waitFix

	State waitFix {
		println("Waiting for anomaly to be fixed...") color yellow
		delay 200
	}
	Transition t5 whenEvent anomalyFixed  -> resuming
	
	State resuming{
		println("Anomaly fixed. Resuming ...") color yellow
		request basicrobot -m moverobot : moverobot($CurrentDestX, $CurrentDestY)
		returnFromInterrupt 
	}
	
}
 

QActor webguimock context ctx_cargoservice{
	State s0 initial{
		println("$name STARTING") color blue
		delay 5000
	}Goto waitforupdate
	
	State waitforupdate{
		println("waiting for update of gui...") color blue
	}Transition t0 whenMsg update -> updategui
	
	State updategui{
			println("updating webgui...") color blue
	}Goto waitforupdate
}



 
 

