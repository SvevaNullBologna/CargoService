/* Generated by AN DISI Unibo */ 
package it.unibo.cargorobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargorobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val stepTime = 350
				val homeX = 0
				val homeY = 0
				val ioX = 5
				val ioY = 0
		
				var destSlotX = 0
				var destSlotY = 0
				var currentDestX = 0
				var currentDestY = 0
				
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name RUNNING")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engageRobot", cond=doswitch() )
				}	 
				state("engageRobot") { //this:State
					action { //it:State
						CommUtils.outblack("Engaging basic-robot...")
						request("engage", "engage(name,stepTime)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="waitForCommand",cond=whenReply("engagedone"))
					transition(edgeName="t08",targetState="retryEngage",cond=whenReply("engagerefused"))
				}	 
				state("retryEngage") { //this:State
					action { //it:State
						CommUtils.outblack("Engage refused, retrying...")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engageRobot", cond=doswitch() )
				}	 
				state("waitForCommand") { //this:State
					action { //it:State
						CommUtils.outblack("Waiting for command")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t19",targetState="prepareDelivery",cond=whenDispatch("command"))
				}	 
				state("prepareDelivery") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("command(C)"), Term.createTerm("command(C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val coords = C.split(" ").last().replace("(", "").replace(")", "").split(",")
												destSlotX = coords(0).toInt()
												destSlotY = coords(1).toInt()
												
												phase = "pickup"
												
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="pickup", cond=doswitch() )
				}	 
				state("pickup") { //this:State
					action { //it:State
						CommUtils.outblack("Going to IOPort to pick up product...")
						
						        	currentDestX = ioX
						        	currentDestY = ioY
						request("moverobot", "moverobot(currentDestX,currentDestY)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t210",targetState="delivery",cond=whenReply("moverobotdone"))
					transition(edgeName="t211",targetState="handleFailure",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t212",targetState="handleAnomaly",cond=whenEvent("alarm"),interruptedStateTransitions)
					interrupthandle(edgeName="t213",targetState="handleAnomaly",cond=whenEvent("anomalyDetected"),interruptedStateTransitions)
				}	 
				state("delivery") { //this:State
					action { //it:State
						CommUtils.outblack("Delivering product to slot...")
						
						        		currentDestX = destSlotX
						        		currentDestY = destSlotY
						request("moverobot", "moverobot(currentDestX,currentDestY)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t314",targetState="return",cond=whenReply("moverobotdone"))
					transition(edgeName="t315",targetState="handleFailure",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t316",targetState="handleAnomaly",cond=whenEvent("alarm"),interruptedStateTransitions)
					interrupthandle(edgeName="t317",targetState="handleAnomaly",cond=whenEvent("anomalyDetected"),interruptedStateTransitions)
				}	 
				state("return") { //this:State
					action { //it:State
						CommUtils.outblack("Returning to home position...")
						
						        		currentDestX = homeX
						        		currentDestY = homeY
						request("moverobot", "moverobot(currentDestX,currentDestY)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t418",targetState="endOfTask",cond=whenReply("moverobotdone"))
					transition(edgeName="t419",targetState="handleFailure",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t420",targetState="handleAnomaly",cond=whenEvent("alarm"),interruptedStateTransitions)
					interrupthandle(edgeName="t421",targetState="handleAnomaly",cond=whenEvent("anomalyDetected"),interruptedStateTransitions)
				}	 
				state("endOfTask") { //this:State
					action { //it:State
						CommUtils.outblack("Transport complete. Emitting finishedtransport.")
						emit("finishedtransport", "finishedtransport(ok)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t522",targetState="handleFailure",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t523",targetState="handleAnomaly",cond=whenEvent("alarm"),interruptedStateTransitions)
					interrupthandle(edgeName="t524",targetState="handleAnomaly",cond=whenEvent("anomalyDetected"),interruptedStateTransitions)
				}	 
				state("handleFailure") { //this:State
					action { //it:State
						CommUtils.outred("Robot move failed. Check system status.")
						emit("finishedtransport", "finishedtransport(failure)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitForCommand", cond=doswitch() )
				}	 
				state("handleAnomaly") { //this:State
					action { //it:State
						CommUtils.outblack("Anomaly detected. Stopping robot...")
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitFix", cond=doswitch() )
				}	 
				state("waitFix") { //this:State
					action { //it:State
						CommUtils.outblack("Waiting for anomaly to be fixed...")
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t525",targetState="resuming",cond=whenEvent("anomalyFixed"))
				}	 
				state("resuming") { //this:State
					action { //it:State
						request("moverobot", "moverobot(currentDestX,currentDestY)" ,"basicrobot" )  
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
