/* Generated by AN DISI Unibo */ 
package it.unibo.sonarmock

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import kotlin.random.Random

class Sonarmock ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		 var inAnomaly = false 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name STARTING")
						delay(5000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitForProduct", cond=doswitch() )
				}	 
				state("waitForProduct") { //this:State
					action { //it:State
							val randomValue = Random.nextInt(50,100) 	 
						if(  !inAnomaly && randomValue/1 >= 75  
						 ){emit("productDetected", "productDetected(T)" ) 
						CommUtils.outgreen("$name EMIT product detected")
						}
						else
						 {if(  inAnomaly  
						  ){emit("anomalyFixed", "anomalyFixed(T)" ) 
						  inAnomaly = false  
						 }
						 else
						  {emit("anomalyDetected", "anomalyDetected(T)" ) 
						   inAnomaly = true  
						  CommUtils.outgreen("$name EMIT anomaly detected")
						  }
						 }
						delay(10000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitForProduct", cond=doswitch() )
				}	 
			}
		}
} 
