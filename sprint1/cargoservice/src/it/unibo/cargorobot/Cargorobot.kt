/* Generated by AN DISI Unibo */ 
package it.unibo.cargorobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargorobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val StepTime = 350
				val HomeX = 0
				val HomeY = 0 
				val IoX = 0
				val IoY = 4
		
				var DestSlotX = 0
				var DestSlotY = 0
				var CurrentDestX = 0
				var CurrentDestY = 0
				
				var Direction = "down"
				
				var endWithFailure = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name RUNNING")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engageRobot", cond=doswitch() )
				}	 
				state("engageRobot") { //this:State
					action { //it:State
						CommUtils.outyellow("Engaging basic-robot...")
						request("engage", "engage(cargorobot,$StepTime)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="waitForCommand",cond=whenReply("engagedone"))
					transition(edgeName="t08",targetState="retryEngage",cond=whenReply("engagerefused"))
				}	 
				state("retryEngage") { //this:State
					action { //it:State
						CommUtils.outyellow("Engage refused, retrying...")
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engageRobot", cond=doswitch() )
				}	 
				state("waitForCommand") { //this:State
					action { //it:State
						CommUtils.outyellow("Waiting for command")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t19",targetState="prepareDelivery",cond=whenDispatch("command"))
				}	 
				state("prepareDelivery") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("command(X,Y,DIR)"), Term.createTerm("command(X,Y,DIR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												DestSlotX = payloadArg(0).toInt()
												DestSlotY = payloadArg(1).toInt()
												Direction = payloadArg(2).toString()
												
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="pickup", cond=doswitch() )
				}	 
				state("pickup") { //this:State
					action { //it:State
						CommUtils.outyellow("Going to IOPort to pick up product...")
						
						        	CurrentDestX = IoX
						        	CurrentDestY = IoY
						CommUtils.outyellow("CurrentDestX = $CurrentDestX; CurrentDestY = $CurrentDestY")
						request("moverobot", "moverobot($CurrentDestX,$CurrentDestY)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t210",targetState="delivery",cond=whenReply("moverobotdone"))
					transition(edgeName="t211",targetState="handleFailure",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t212",targetState="handleAnomaly",cond=whenEvent("alarm"),interruptedStateTransitions)
					interrupthandle(edgeName="t213",targetState="handleAnomaly",cond=whenEvent("anomalyDetected"),interruptedStateTransitions)
				}	 
				state("delivery") { //this:State
					action { //it:State
						CommUtils.outyellow("Delivering product to slot...")
						
						        		CurrentDestX = DestSlotX
						        		CurrentDestY = DestSlotY
						CommUtils.outyellow("CurrentDestX = $CurrentDestX; CurrentDestY = $CurrentDestY")
						request("moverobot", "moverobot($CurrentDestX,$CurrentDestY)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t314",targetState="deposit",cond=whenReply("moverobotdone"))
					transition(edgeName="t315",targetState="handleFailure",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t316",targetState="handleAnomaly",cond=whenEvent("alarm"),interruptedStateTransitions)
					interrupthandle(edgeName="t317",targetState="handleAnomaly",cond=whenEvent("anomalyDetected"),interruptedStateTransitions)
				}	 
				state("deposit") { //this:State
					action { //it:State
						forward("setdirection", "dir($Direction)" ,"basicrobot" ) 
						CommUtils.outyellow("depositing product on slot...")
						delay(300) 
						emit("deliveredToSlot", "deliveredToSlot(ok)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="return", cond=doswitch() )
				}	 
				state("return") { //this:State
					action { //it:State
						CommUtils.outyellow("Returning to home position...")
						
						        		CurrentDestX = HomeX
						        		CurrentDestY = HomeY
						CommUtils.outblack("CurrentDestX = $CurrentDestX; CurrentDestY = $CurrentDestY")
						request("moverobot", "moverobot($CurrentDestX,$CurrentDestY)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t418",targetState="endOfTask",cond=whenReply("moverobotdone"))
					transition(edgeName="t419",targetState="handleFailure",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t420",targetState="handleAnomaly",cond=whenEvent("alarm"),interruptedStateTransitions)
					interrupthandle(edgeName="t421",targetState="handleAnomaly",cond=whenEvent("anomalyDetected"),interruptedStateTransitions)
				}	 
				state("endOfTask") { //this:State
					action { //it:State
						if(  endWithFailure  
						 ){CommUtils.outred("Robot move failed. Check system status.")
						emit("finishedtransport", "finishedtransport(failure)" ) 
						}
						else
						 {CommUtils.outyellow("Transport complete. Emitting finishedtransport.")
						 emit("finishedtransport", "finishedtransport(ok)" ) 
						 }
						 val Dir = "down" 
						forward("setdirection", "dir($Dir)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t522",targetState="waitForCommand",cond=whenReply("moverobotdone"))
					transition(edgeName="t523",targetState="handleFailure",cond=whenReply("moverobotfailed"))
					interrupthandle(edgeName="t524",targetState="handleAnomaly",cond=whenEvent("alarm"),interruptedStateTransitions)
					interrupthandle(edgeName="t525",targetState="handleAnomaly",cond=whenEvent("anomalyDetected"),interruptedStateTransitions)
				}	 
				state("handleFailure") { //this:State
					action { //it:State
						 endWithFailure = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="return", cond=doswitch() )
				}	 
				state("handleAnomaly") { //this:State
					action { //it:State
						CommUtils.outyellow("Anomaly detected. Stopping robot...")
						emit("alarm", "alarm(blocca)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitFix", cond=doswitch() )
				}	 
				state("waitFix") { //this:State
					action { //it:State
						CommUtils.outyellow("Waiting for anomaly to be fixed...")
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t526",targetState="resuming",cond=whenEvent("anomalyFixed"))
				}	 
				state("resuming") { //this:State
					action { //it:State
						CommUtils.outyellow("Anomaly fixed. Resuming ...")
						request("moverobot", "moverobot($CurrentDestX,$CurrentDestY)" ,"basicrobot" )  
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
