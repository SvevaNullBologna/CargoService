System cargoservice_overview 
 
//MESSAGES AND EVENTS 
//Companysimulator -> CargoService
Request loadrequest : loadrequest(PID)
//CargoService -> ProductService 
Request getweight: getweight(PID) 
//ProductService -> CompanySimulator 
Reply returnweight : returnweight(PID, Weight)
Reply productnotexistent: productnotexistent(PID)
//CargoService -> CargoService
Dispatch accepted : accepted(PID, Weight, Slot)
Dispatch refused : refused(PID, Weight)
//CargoService -> cargorobot
Dispatch command : command(C)
//SonarService -> Whoever is listening
Event productDetected : productDetected(T)
Event anomalyDetected : anomalyDetected(T)
Event anomalyFixed : anomalyFixed(T)
//CargoRobot -> BasicRobot 
Dispatch cmd : cmd(C)
Request step: step(length)
//CargoRobot -> webgui
Dispatch update : update(U)

//CargoRobot -> Whoever is listening
Event finishedtransport : finishedtransport(T)


Context ctx_cargoservice 			ip [host="localhost" port=8000]
Context ctx_productservice 			ip [host="localhost" port=8001]
Context ctx_basicrobot 				ip [host="localhost" port=8002]
Context ctx_companysim 				ip [host="localhost" port=8003]
Context ctx_sonarservice			ip [host="localhost" port=8004]

ExternalQActor basicrobot context ctx_basicrobot
ExternalQActor productservice context ctx_productservice 


QActor companysimulator context ctx_companysim{
 	State s0 initial {
 		println("$name STARTS") color magenta
 		request cargoservice -m loadrequest : loadrequest($PID)
  	} 
}

QActor cargoservice context ctx_cargoservice{
	[#
		import main.java.Slots
		val MaxLoad = 1000
		val slotSpaces = 5
		val slots: Slots
		var currentHoldWeight = 0
		var io_port : Position 


		currentSlot = -1
		currentPID = -1
		currentWeight = -1
		
	#]
	State s0 initial{
		println("$name STARTS")
		[#
			slots = new Slots(5,slotSpaces) //mockup
			io_port = new Position(0,0); //mockup 
		#]
	}
	Goto waitrequest
	
	State waitrequest{
		println("WAITING FOR LOAD REQUEST...")	
	}
	Transition t0 whenRequest loadrequest -> getweight
	
	/*State sendupdate{
		forward webgui -m update : update(U) 
	}*/
	
	State getweight{
		printCurrentMessage
		onMsg(loadrequest: loadrequest(PID)){
			[#
				var PID = payloadArg(0).toInt()
				
			#]
		}
		request productservice -m getweight : getweight($PID)
	}
	Transition t1 
	whenReply returnweight -> validateRequest
	whenReply productnotexistent -> managerefusal
	
	State validateRequest{
		printCurrentMessage
		onMsg(returnweight : returnweight(PID, Weight)){
			[#
				val PID = payloadArg(0).toInt()
				val Weight = payloadArg(1).toInt()
				val Slot = slots.getAvaiableSlot();
				val canLoad = (currentHoldWeight + weight) <= MaxLoad && slotId != -1
			#]
			if[#canLoad#]{
				[#
					currentPID = PID
					currentWeight = Weight
					currentSlot = Slot
					slots.setAvaiableSlot(Slot)
				#]
				autodispatch accepted : accepted($PID, $Weight, $Slot)
			}
			else{
				autodispatch refused : refused($PID, $Weight)
			}
		
		}
	}
	Transition t2
	whenMsg accepted -> waitForProduct
	whenMsg refused -> managerefusal
	
	State waitForProduct{
		println("REQUEST ACCEPTED. Waiting for product on IOPort...")
	}
	Transition t3
	whenEvent anomalyDetected -> manageanomaly
	whenEvent productDetected -> serveloadrequest
	
	State serveloadrequest{
		println("Product detected. Moving robot...")
		forward cargorobot -m command : command("move to $currentSlot")
	}Goto waitendofrequest
	
	State waitendofrequest{
		println("Waiting for robot to finish its task...")
		delay 300 	
	}
	Transition t4 
	whenEvent finishedtransport -> waitrequest
	whenEvent anomalyDetected -> manageanomaly
	
	State managerefusal{
		println("Request refused. Back to wait.")
	}Goto waitrequest
	
	State manageanomaly{
		println("Anomaly detected during wait. Fixing...")
		forward cargorobot -m command: command("stop")
	}Transition t5 
	whenEvent anomalyFixed -> resume
	
	State resume{
		println("Anomaly fixed. Resuming...")
		forward cargorobot -m command : command("resume")
	}Goto waitendofrequest
}

QActor cargorobot context ctx_cargoservice{
	State s0 initial{
		println("$name READY")
	}Goto waitForCommand 
	
	State waitForCommand{
		println("Waiting for command")
	}
	Transition t0 whenMsg command  -> executeCommand
	
	State executeCommand{
		printCurrentMessage
		onMsg(command : command(C)){
			[#
				var C = payloadArg(0)
				var length = 100 //temp value of length
			#]
		}
		println("Executing command : $C")
		forward basicrobot -m cmd : cmd(C)
		request basicrobot -m step : step(length)
	}Goto waitToFinish
	
	State waitToFinish{
		println("waiting to finish")
	}Transition t1 
	whenEvent finishedtransport -> waitForCommand
	
}

QActor sonarservice context ctx_sonarservice{ 
	State s0 initial{
		println("$name STARTING")
	}Goto waitForProduct 
	
	State waitForProduct{
		
		if[# true #]{//if product detected correctly for around three seconds 
			emit productDetected : productDetected(T)
		}
		else{//altrimenti emette un'anomalia
			emit anomalyDetected : anomalyDetected(T)
		}
	}Goto waitForProduct
	
}

QActor webgui context ctx_cargoservice{
	State s0 initial{
		println("$name STARTING")
	}Goto waitforupdate
	
	State waitforupdate{
		println("waiting for update of gui...")
	}Transition t0 whenMsg update -> updategui
	
	State updategui{
			println("updating webgui...")
	}Goto waitforupdate
}


 
 

