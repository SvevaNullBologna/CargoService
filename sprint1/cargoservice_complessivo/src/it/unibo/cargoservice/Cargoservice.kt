/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.Slots
import main.java.Slot
import main.java.domain.Product

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val MaxLoad = 1000
				val S: Slots = Slots()
				var Cur_HoldWeight = 0
		
				var Cur_Slot = -1
				var Cur_PID = -1
				var Cur_Weight = -1
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("cargoservice STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitrequest", cond=doswitch() )
				}	 
				state("waitrequest") { //this:State
					action { //it:State
						CommUtils.outmagenta("WAITING FOR LOAD REQUEST...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="getweight",cond=whenRequest("loadrequest"))
				}	 
				state("getweight") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Cur_PID = payloadArg(0).toInt()  
								request("getProduct", "getProduct($Cur_PID)" ,"productservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="checkProdAnswer",cond=whenReply("getProductAnswer"))
				}	 
				state("checkProdAnswer") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("product(JSonString)"), Term.createTerm("product(PJson)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val jsonStr = payloadArg(0)
												val p = Product(jsonStr)
												Cur_Weight = p.getWeight()
												Cur_PID = p.getProductId()
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="validateRequest", cond=doswitchGuarded({ Cur_Weight > 0  
					}) )
					transition( edgeName="goto",targetState="managerefusal", cond=doswitchGuarded({! ( Cur_Weight > 0  
					) }) )
				}	 
				state("managerefusal") { //this:State
					action { //it:State
						CommUtils.outmagenta("Request refused. Back to wait.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitrequest", cond=doswitch() )
				}	 
				state("validateRequest") { //this:State
					action { //it:State
						 
									Cur_Slot = S.getAvaiableSlot()
									val canLoad = Cur_Weight > 0 && (Cur_HoldWeight + Cur_Weight) <= MaxLoad && Cur_Slot != -1 
						if( canLoad 
						 ){
											val T = "to load $Cur_Slot"
						forward("update", "update($T)" ,"webguimock" ) 
						forward("accepted", "accepted($Cur_PID,$Cur_Weight,$Cur_Slot)" ,name ) 
						}
						else
						 {forward("refused", "refused($Cur_PID,$Cur_Weight)" ,name ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t22",targetState="waitForProduct",cond=whenDispatch("accepted"))
					transition(edgeName="t23",targetState="managerefusal",cond=whenDispatch("refused"))
				}	 
				state("waitForProduct") { //this:State
					action { //it:State
						CommUtils.outmagenta("REQUEST ACCEPTED. Waiting for product on IOPort...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t34",targetState="serveloadrequest",cond=whenEvent("productDetected"))
				}	 
				state("serveloadrequest") { //this:State
					action { //it:State
						CommUtils.outmagenta("Product detected. Moving robot...")
						 
									val destination = S.getSlotPositionById(Cur_Slot)
									val C = "move to $destination"
						forward("command", "command($C)" ,"cargorobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitendofrequest", cond=doswitch() )
				}	 
				state("waitendofrequest") { //this:State
					action { //it:State
						CommUtils.outmagenta("Waiting for robot to finish its task...")
						delay(300) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t45",targetState="lastoperations",cond=whenEvent("finishedtransport"))
				}	 
				state("lastoperations") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("finishedtransport(T)"), Term.createTerm("finishedtransport(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val msg = payloadArg(0).toString() 
								if(  msg=="failure"  
								 ){CommUtils.outmagenta("There was a fatal error with the load. Load request rejected")
								}
								else
								 {
								 					S.registerProductInSlot(Cur_Slot)
								 				  	Cur_HoldWeight = Cur_HoldWeight + Cur_Weight 
								 				  	val T = "loaded to $Cur_Slot"
								 CommUtils.outblack("product loaded successfully...")
								 }
								
												Cur_Slot = -1
												Cur_PID = -1
												Cur_Weight = -1
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitrequest", cond=doswitch() )
				}	 
			}
		}
} 
