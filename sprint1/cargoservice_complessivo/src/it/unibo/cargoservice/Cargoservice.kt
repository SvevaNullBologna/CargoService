/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				import main.java.Slots
				val MaxLoad = 1000
				val slotSpaces = 5
				val slots: Slots
				var currentHoldWeight = 0
				var io_port : Position 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name STARTS")
						
									slots = new Slots(5,slotSpaces)
									//io_port = 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitrequest", cond=doswitch() )
				}	 
				state("waitrequest") { //this:State
					action { //it:State
						CommUtils.outblack("WAITING FOR LOAD REQUEST...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="getweight",cond=whenRequest("loadrequest"))
				}	 
				state("getweight") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("loadrequest(PID)"), Term.createTerm("loadrequest(PID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var PID = payloadArg(0).toInt()
												
						}
						request("getweight", "getweight($PID)" ,"productservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="validateRequest",cond=whenReply("returnweight"))
					transition(edgeName="t12",targetState="managerefusal",cond=whenReply("productnotexistent"))
				}	 
				state("validateRequest") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("returnweight(PID,Weight)"), Term.createTerm("returnweight(PID,Weight)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val PID = payloadArg(0).toInt()
												val Weight = payloadArg(1).toInt()
												val Slot = slots.getAvaiableSlot();
												val canLoad = (currentHoldWeight + weight) <= MaxLoad && slotId != -1
								if( canLoad 
								 ){ slots.setAvaiableSlot(Slot)  
								forward("accepted", "accepted($PID,$Weight,$Slot)" ,name ) 
								}
								else
								 {forward("refused", "refused($PID,$Weight)" ,name ) 
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t23",targetState="waitForProduct",cond=whenDispatch("accepted"))
					transition(edgeName="t24",targetState="managerefusal",cond=whenDispatch("refused"))
				}	 
				state("waitForProduct") { //this:State
					action { //it:State
						CommUtils.outblack("REQUEST ACCEPTED. Waiting for product on IOPort...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t35",targetState="manageanomaly",cond=whenEvent("anomalyDetected"))
					transition(edgeName="t36",targetState="serveloadrequest",cond=whenEvent("productDetected"))
				}	 
				state("serveloadrequest") { //this:State
					action { //it:State
						CommUtils.outblack("Product detected. Moving robot...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitendofrequest", cond=doswitch() )
				}	 
				state("waitendofrequest") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t47",targetState="waitrequest",cond=whenEvent("finishedtransport"))
				}	 
				state("managerefusal") { //this:State
					action { //it:State
						CommUtils.outblack("Request refused. Back to wait.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitrequest", cond=doswitch() )
				}	 
				state("manageanomaly") { //this:State
					action { //it:State
						CommUtils.outblack("Anomaly detected during wait. Resetting.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitrequest", cond=doswitch() )
				}	 
			}
		}
} 
