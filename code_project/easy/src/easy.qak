System easy

mqttBroker "localhost" : 1883 eventTopic "unibo/qak/events" 
 
/*Dispatch message : message(Msg)
//webgui -> companyrequestreceiver  
Request sendrequest : sendrequest(PID)
//companyrequestreceiver -> webgui
Reply sendAnswerToRequest : sendAnswerToRequest(Answ) for sendrequest
*/
/*Request getProduct : product( ID )    
Reply   getProductAnswer: product( JSonString ) for getProduct 
*/
//SonarService -> Whoever is listening
Event productDetected : productDetected(T)
Event anomalyDetected : anomalyDetected(T)
Event anomalyFixed : anomalyFixed(T)


Context ctx_easy ip[host="localhost" port=8000]

//Context ctx_productservice ip[host="127.0.0.1" port=8111]

//ExternalQActor productservice context ctx_productservice


/*QActor tryproductservice context ctx_easy {
	State s0 initial{
		println("$name starts") color yellow
	}
	Goto sendRequest
	
	State sendRequest{
		[# val PID = 10 #]
		request productservice -m getProduct : product($PID)
	}Goto waitingresponse
	
	State waitingresponse{
		println("$name waiting answer from product service") color yellow
	}
	Transition t0
	whenReply getProductAnswer -> receivedAnswer
	
	State receivedAnswer{
		onMsg(getProductAnswer: product( JSonString )){
			[# val Product = payloadArg(0) #]
			println("received product: $Product")
		}
		delay 3000
	}
	Goto sendRequest
	
	
	
}
*/


QActor trymqtt context ctx_easy{
	State s0 initial{
		println("$name starts") color yellow
	}Goto working
	State working{
		println("$name waiting sonarservice events") color yellow
	}
	Transition t0 
	whenEvent productDetected -> printProductDetected
	whenEvent anomalyDetected -> printAnomalyDetected
	whenEvent anomalyFixed -> printAnomalyFixed 
	
	State printProductDetected {
		println("product detected ") color yellow
	}Goto working
	
	State printAnomalyDetected{
		println("anomaly detected ") color yellow
	}Goto working
	
	State printAnomalyFixed{
		println("anomaly fixed ") color yellow
	}Goto working
}


/*QActor example context ctx_easy {
	import "main.java.jsonTestMessageBuilder"
	State s0 initial {
		println("$name starts") color cyan
		delay 2000
	}Goto sendingString
	//otherMsg()
	State sendingString {
		println("$name sending hold json") color cyan
		[# val Msg = jsonTestMessageBuilder.holdToJson() 
			
		#]
		updateResource [# Msg #]
		
		delay 2000
	}Goto sendingothermsg
	
	State sendingothermsg{
		println("$name sending success json") color cyan
		[# val Tsg = jsonTestMessageBuilder.otherMsg() #]	
		updateResource [# Tsg #]
		delay 2000
	}Goto sendingString
}*/



