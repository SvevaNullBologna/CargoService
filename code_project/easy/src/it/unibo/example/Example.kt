/* Generated by AN DISI Unibo */ 
package it.unibo.example

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Example ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("example startss")
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="checkproxy", cond=doswitch() )
				}	 
				state("checkproxy") { //this:State
					action { //it:State
						CommUtils.outblack("Checking if proxy is ready...")
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="try", cond=doswitch() )
				}	 
				state("try") { //this:State
					action { //it:State
						 val Device = "example"
									val Length = 320
						CommUtils.outblue("trying engage")
						request("engage", "engage($Device,$Length)" ,"basicrobot" )  
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitengage", cond=doswitch() )
				}	 
				state("waitengage") { //this:State
					action { //it:State
						CommUtils.outblue("waiting engage")
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="ok",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="error",cond=whenReply("engagerefused"))
				}	 
				state("ok") { //this:State
					action { //it:State
						CommUtils.outblue("engage done")
						request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="movedone",cond=whenReply("moverobotdone"))
					transition(edgeName="t13",targetState="error",cond=whenReply("moverobotfailed"))
				}	 
				state("movedone") { //this:State
					action { //it:State
						CommUtils.outblue("move done")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("error") { //this:State
					action { //it:State
						CommUtils.outblue("error engage")
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="try", cond=doswitch() )
				}	 
			}
		}
} 
