/* Generated by AN DISI Unibo */ 
package it.unibo.cargoservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Cargoservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "state_init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var MaxLoad = 1000;
				var currentRobotWeight = 0;
		return { //this:ActionBasciFsm
				state("state_init") { //this:State
					action { //it:State
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="operative", cond=doswitch() )
				}	 
				state("operative") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="requestcheck",cond=whenRequest("loadrequest"))
					transition(edgeName="t01",targetState="requestaccepted",cond=whenReply("loadrequestaccepted"))
					transition(edgeName="t02",targetState="loadrejected",cond=whenReply("loadrequestrejected"))
				}	 
				state("requestcheck") { //this:State
					action { //it:State
						CommUtils.outblack("[cargoservice] asking for a check on the received loadrequest to ProductService...")
						request("checkloadrequest", "checkloadrequest(PID,Weight)" ,"productservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="operative", cond=doswitch() )
				}	 
				state("requestaccepted") { //this:State
					action { //it:State
						
									PID = payloadArg(0);
									Weight = payLoadArg(1);
									
									if(currentRobotWeight + Weight > MaxLoad){  
							}
									else{		 
							}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="operative", cond=doswitch() )
				}	 
				state("loadrejected") { //this:State
					action { //it:State
						
									PID = payloadArg(0);
									Cause = payloadArg(1);
						CommUtils.outblack("[cargoservice] Load request REJECTED - PID=$PID, Cause=$Cause")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="operative", cond=doswitch() )
				}	 
			}
		}
} 
