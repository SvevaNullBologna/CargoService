System cargoservice_overview

//MESSAGES AND EVENTS
////////////////////////////
//Company -> CargoService
Request loadrequest: loadrequest(PID)
//CargoService -> ProductService
Request checkloadrequest: checkloadrequest(PID)
// CargoService -> Company
Reply loadrequestaccepted : loadrequestaccepted(PID,Weight)
Reply loadrequestrefused : loadrequestrefused(Cause)
Dispatch loadrequestrejected : loadrequestrejected(Cause)
////////////////////////////
//CargoService -> robot
Dispatch stop : stop(M)
Dispatch movefromto : movefromto(X,Y)
Dispatch resume : resume(Y)
///////////////////////////
//CargoService -> WebGUI


//CONTEXTS
Context ctxddrrobot			ip [host="localhost" port=11800]
Context ctxsonarservice		ip [host="localhost" port=11801]
Context ctxcargoservice		ip [host="localhost" port=11802]
Context ctxproductservice	ip [host="localhost" port=11803]
Context ctxcompanysim		ip [host="localhost" port=11804]

//QACTORS
ExternalQActor basicrobot context ctxddrrobot
ExternalQActor productservice context ctxproductservice


QActor cargoservice context ctxcargoservice{
	[#
		val MaxLoad = 1000;
		var HOME : Position;
		var currentRobotWeight = 0;
		var slots: List<Slot>
		var io_port : Position
	#]
	State state_init initial{
		//add starting up cargoservice operations
		delay 2000
	}Goto operative_wait
	State operative_wait{
		println("$name  WAITING FOR REQUEST")
	}Transition t0 whenRequest loadrequest -> requestcheck
	              whenReply loadrequestaccepted -> requestaccepted
				  whenDispatch loadrequestrejected -> requestrejected
				  
	State requestcheck{
		println("[cargoservice] asking for a check on the received loadrequest to ProductService...")
		request productservice -m checkloadrequest: checkloadrequest(PID)
	}Goto operative_wait
	
	State requestaccepted{
		[#
			val PID = payloadArg(0).toString();
			val Weight = payLoadArg(1).toFloat();
			var Cause;
		#]
		if [# currentRobotWeight + Weight < MaxLoad && slots.free() > 0 #] {
   		 [#
    	  	val destination_slot = slots.getEmptySlot();
      		destination_slot.setProduct(PID);
      		val SlotId = destination_slot.getId();
      		// procedi con il carico...
    	 #]
    	
    	// qui mandi reply di accettazione se serve
  		} else {
    	[#
      		val cause = if (currentRobotWeight + Weight >= MaxLoad) 
                    "Supera peso massimo" 
                  else 
                    "Nessuno slot disponibile";
    	#]
    	autodispatch loadrequestrejected : loadrequestrejected($Cause)
  }
}
		
		
			
	
		
		
	}Goto operative 
	
	
	State requestrejected{
			[#
				val PID = payloadArg(0);	
			#]
			println("[cargoservice] Load request REJECTED - PID=$PID")
			
	}Goto operative



}


QActor request_simulator context ctxcompanysim{
	
	State state_init initial {
		println("[request_simulator] sending a load request to ProductService...")
		request cargoservice -m loadrequest: loadrequest(PID)
	}
	
}	

QActor sonarservice context ctxsonarservice{
	State state_init initial{
		
	}
}


